#### OGS-5 Project ####

# Specify minimum CMake version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)

# Project name
PROJECT(OGS)

###############
### Options ###
###############
# Configurations
OPTION(OGS_FEM "Default configuration" OFF)
OPTION(OGS_FEM_SP "Sparse matrix configuration" OFF)
OPTION(OGS_FEM_JFNK "Jacobi free Newton-Krylov method for H2M problem" OFF)
OPTION(OGS_FEM_PETSC "Use PETSc parallel solver" OFF)
OPTION(OGS_FEM_PETSC_GEMS "GEMS with PETSc parallel solver" OFF)
OPTION(OGS_FEM_GEMS "GEMS configuration" OFF)
OPTION(OGS_FEM_IPQC "IPhreeqc configuration" OFF)
OPTION(OGS_FEM_PQC "Phreeqc configuration" OFF)
OPTION(OGS_FEM_BRNS "BRNS configuration" OFF)
OPTION(OGS_FEM_CHEMAPP "CHEMAPP configuration" OFF)
OPTION(OGS_FEM_LIS "Library of Iterative Solvers for Linear Systems configuration" OFF)
OPTION(OGS_FEM_CAP "CAP configuration" OFF)
OPTION(OGS_FEM_MKL "Math kernel library configuration" OFF)
OPTION(BLUE_G "Blue/G optimization" OFF)

# supported on Linux and Windows
OPTION(OGS_FEM_MPI "Message passing interface configuration" OFF)
# needs to be set of MPI and GEMS is used
OPTION(PARALLEL_USE_MPI "Message passing interface configuration also for GEMS coupling" OFF)


### CMake setup ###
INCLUDE(CMakeConfiguration/CMakeSetup.cmake)

### Compiler setup ###
INCLUDE(CMakeConfiguration/CompilerSetup.cmake)

### Find directories and libraries ###
INCLUDE (CMakeConfiguration/Find.cmake)

### General project setup ###
INCLUDE(CMakeConfiguration/GeneralProjectSetup.cmake)

# Set default configuration when no other config is given
IF (NOT (OGS_FEM OR OGS_FEM_SP OR OGS_FEM_GEMS OR OGS_FEM_PETSC_GEMS OR OGS_FEM_PQC OR OGS_FEM_IPQC OR OGS_FEM_BRNS OR OGS_FEM_CHEMAPP OR OGS_FEM_LIS OR OGS_FEM_MKL OR OGS_FEM_MPI OR OGS_FEM_PETSC OR OGS_FEM_CAP))
	MESSAGE (STATUS "No configuration specified. Default confuguration is used.")
	SET (OGS_FEM ON)
ENDIF ()

# Check if a valid OGS configuration is given (see Macros.cmake)
CHECK_CONFIG()

# Additional options
OPTION(OGS_PACKAGING "Creating installers / packages" OFF)
OPTION_REQUIRES(OGS_PACKAGING_ZIP "Do you want to package as zip?" OGS_PACKAGING)
OPTION(OGS_PYTHON "Enable python scripting interface" OFF)
OPTION(OGS_BUILD_UTILITIES "Build additional utility programs?" OFF)
OPTION(OGS_CMAKE_DEBUG "Show additional cmake debug information" OFF)
OPTION(OGS_ONE_BIG_GTEST "Should all gtests be collected to one ctest" ON)
OPTION(OGS_BUILD_INFO "Should build information be generated" ON)
OPTION(CMAKE_CMD_ARGS "Build ogs5 storing the CMake command line args (hint: use cmake.ogs.sh" OFF )
IF(GCC)
	IF(GPROF_PATH)
		OPTION(OGS_PROFILE "Enables compiling with flags set for profiling with gprof." OFF)
		IF(OGS_PROFILE AND DOT_TOOL_PATH)
			OPTION(OGS_OUTPUT_PROFILE "Enables pdf output of profiling results." OFF)
		ENDIF() # OGS_PROFILE AND DOT_TOOL_PATH
	ENDIF() # GPROF_PATH

	OPTION_REQUIRES(OGS_COVERAGE "Enables code coverage measurements with gcov/lcov." OGS_BUILD_TESTS)
ENDIF() # GCC
OPTION (OGS_BUILD_TESTS "Enables building of tests." OFF)
OPTION (OGS_NO_EXTERNAL_LIBS "Builds OGS without any external dependencies."
OFF)
OPTION (OGS_DELETE_EDGES_AFTER_INIT "Delete mesh edges after initialization if possible" OFF)
OPTION (OGS_OUTPUT_TIME_ALLPCS "Output clock time for all processes" OFF)

MARK_AS_ADVANCED(FORCE OGS_PYTHON OGS_CMAKE_DEBUG OGS_ONE_BIG_GTEST OGS_BUILD_INFO CMAKE_CMD_ARGS OGS_DELETE_EDGES_AFTER_INIT)

###########################################################################
### OGS version information. Adjust these if you release a new version. ###
###########################################################################
SET (OGS_VERSION_MAJOR 5)
SET (OGS_VERSION_MINOR 5)
SET (OGS_VERSION_PATCH 7)
SET (OGS_RELEASE_PERSONS "WH/TK/EJ")
#SET (OGS_VERSION "${OGS_VERSION_MAJOR}.${OGS_VERSION_MINOR}.${OGS_VERSION_PATCH}(${OGS_RELEASE_PERSONS})")
SET (OGS_VERSION "${OGS_VERSION_MAJOR}.${OGS_VERSION_MINOR}(${OGS_RELEASE_PERSONS})")
# should we use ISO dates: 2010-12-31 ?
SET (OGS_DATE "02.04.2015")

# Check for number of processors
INCLUDE(ProcessorCount)
ProcessorCount(PROCESSOR_COUNT)
IF(PROCESSOR_COUNT EQUAL 0)
	MESSAGE(WARNING "Processor count could not be detected. Setting to one processor.")
	SET(PROCESSOR_COUNT 1)
ELSE()
	MESSAGE(STATUS "Number of processors: ${PROCESSOR_COUNT}")
ENDIF() # PROCESSOR_COUNT

###################
### Fem configs ###
###################
IF(OGS_FEM)
	MESSAGE (STATUS	"Configuring for FEM command line" )
ENDIF(OGS_FEM)

IF(OGS_FEM_SP)
	MESSAGE (STATUS	"Configuring for FEM command line with new sparse matrix" )
	SET(OGS_USE_NEW_EQS ON BOOL)
ENDIF(OGS_FEM_SP)

IF(OGS_FEM_JFNK)
	MESSAGE (STATUS "Configuring for Jacobi free Newton-Krylov method for H2M problem" )
	SET(OGS_USE_NEW_EQS ON BOOL)
	ADD_DEFINITIONS(-DJFNK_H2M)
ENDIF(OGS_FEM_JFNK)

IF(OGS_FEM_PETSC)
	MESSAGE (STATUS "Configuring for PETSc" )
	SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/findPETSC)

	FIND_PACKAGE(PETSc REQUIRED QUIET)
	IF(PETSC_VERSION VERSION_GREATER 3.3)
		ADD_DEFINITIONS(-DUSEPETSC34 -DUSE_PETSC)
		MESSAGE(STATUS "found version greater 3.3, version is ${PETSC_VERSION}")
	ELSE()
		ADD_DEFINITIONS(-DUSE_PETSC)
	ENDIF()
	INCLUDE_DIRECTORIES( ${PETSC_INCLUDES} )
ENDIF()

IF(OGS_FEM_PETSC_GEMS)
	MESSAGE (STATUS "Configuring for GEMS with PETSc" )
	INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
	LINK_DIRECTORIES( ${Boost_LIBRARY_DIR} )
	SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/findPETSC)

	FIND_PACKAGE(PETSc REQUIRED QUIET)
	IF(PETSC_VERSION VERSION_GREATER 3.3)
		ADD_DEFINITIONS(-DUSEPETSC34 -DUSE_PETSC -DNO_ERROR_CONTROL -DGEM_REACT -DGEMlib -DIPMGEMPLUGIN)
		MESSAGE(STATUS "found version greater 3.3, version is ${PETSC_VERSION}")
	ELSE()
		ADD_DEFINITIONS(-DUSE_PETSC -DNO_ERROR_CONTROL -DGEM_REACT -DGEMlib -DIPMGEMPLUGIN)
	ENDIF()
	INCLUDE_DIRECTORIES( ${PETSC_INCLUDES} )

	IF (MSVC)
		SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
		SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
	ENDIF (MSVC)
ENDIF()

IF(OGS_FEM_MPI)
	MESSAGE (STATUS "Configuring for FEM command line with MPI" )
	SET(PARALLEL_USE_MPI ON BOOL "Use Message Passing Interface")
	SET(OGS_USE_NEW_EQS ON BOOL)
ENDIF(OGS_FEM_MPI)

IF(OGS_FEM_MPI_KRC)
	ADD_DEFINITIONS(-DUSE_MPI_KRC)
	SET(PARALLEL_USE_MPI ON BOOL "Use Message Passing Interface")
	SET(OGS_USE_NEW_EQS ON BOOL)
ENDIF()

IF(OGS_FEM_GEMS)
	MESSAGE (STATUS	"Configuring for FEM command line with GEMS" )
	SET(OGS_USE_NEW_EQS ON BOOL)
	ADD_DEFINITIONS(-DNO_ERROR_CONTROL -DGEM_REACT -DGEMlib -DIPMGEMPLUGIN )
	IF (MSVC)
		SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
		SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
	ENDIF (MSVC)

	INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
	LINK_DIRECTORIES( ${Boost_LIBRARY_DIR} )

	IF(PARALLEL_USE_MPI)
		ADD_DEFINITIONS(-DUSE_MPI_GEMS)
	ENDIF(PARALLEL_USE_MPI)
ENDIF(OGS_FEM_GEMS)

IF(OGS_FEM_IPQC)
	MESSAGE (STATUS "Configuring for FEM command line with IPQC" )
	ADD_DEFINITIONS( -DOGS_FEM_IPQC )
	IF(PARALLEL_USE_MPI)
		SET(OGS_USE_NEW_EQS ON BOOL)
	ENDIF()
ENDIF(OGS_FEM_IPQC)

IF(OGS_FEM_PQC)
	MESSAGE (STATUS "Configuring for FEM command line with PQC" )
	MESSAGE (STATUS "Configuration: g++ and LIBPHREEQC")
	SET(OGS_USE_NEW_EQS ON BOOL)
	ADD_DEFINITIONS(-DLIBPHREEQC -D_POSIX_SOURCE -DNO_ERROR_CONTROL)
	ADD_SUBDIRECTORY ( PQC )
	IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
		ADD_DEFINITIONS ( "-DMDL_DEBUG" )
	ENDIF() # Debug
ENDIF(OGS_FEM_PQC)

IF(OGS_FEM_BRNS)
	MESSAGE (STATUS	"Configuring for FEM command line with BRNS" )
	IF (UNIX)
		FIND_PACKAGE(BLAS)
		FIND_PACKAGE(LAPACK)
	ENDIF()
	SET(OGS_USE_NEW_EQS ON BOOL)
	ADD_DEFINITIONS(-DBRNS -DNO_ERROR_CONTROL -D_POSIX_SOURCE)
	IF(PARALLEL_USE_MPI)
		ADD_DEFINITIONS(-DUSE_MPI_BRNS)
	ENDIF(PARALLEL_USE_MPI)
ENDIF(OGS_FEM_BRNS)

IF(OGS_FEM_LIS)
	MESSAGE (STATUS "Configuring for FEM command line with LIS" )
	SET(OGS_USE_NEW_EQS ON BOOL)
	ADD_DEFINITIONS(-DIPMGEMPLUGIN -DLIS)
	SET(PARALLEL_USE_OPENMP ON BOOL "Use Library of Iterative Solvers")
	SET(LIS ON BOOL "Use Library of Iterative Solvers")
	MARK_AS_ADVANCED(PARALLEL_USE_OPENMP LIS)
ENDIF(OGS_FEM_LIS)

IF(OGS_FEM_MKL)
	MESSAGE (STATUS	"Configuring for FEM command line with MKL" )
	SET(OGS_USE_NEW_EQS ON BOOL)
	ADD_DEFINITIONS(-DNO_ERROR_CONTROL -DMKL -DLIS)
	SET(PARALLEL_USE_OPENMP ON BOOL "Use Library of Iterative Solvers")
	SET(LIS ON BOOL "Use Library of Iterative Solvers")
	SET(MKL ON BOOL "Use Math Kernel Library")
	MARK_AS_ADVANCED(PARALLEL_USE_OPENMP LIS MKL)
ENDIF(OGS_FEM_MKL)

IF(OGS_FEM_CHEMAPP)
	MESSAGE (STATUS	"Configuring for FEM command line with CHEMAPP" )
	ADD_DEFINITIONS(-DCHEMAPP)
ENDIF(OGS_FEM_CHEMAPP)

IF(OGS_FEM_CAP)
	MESSAGE (STATUS  "Configuring for FEM command line with CAP" )
	SET( PRJ_EXT "-CAP" )
	ADD_DEFINITIONS(-DOGS_FEM_CAP)
	IF (UNIX) # Only supported on Linux
		INCLUDE_DIRECTORIES(/usr/lib64)
		LINK_DIRECTORIES(/usr/lib64)
	ENDIF (UNIX)
ENDIF(OGS_FEM_CAP)

### End fem configs ###

IF(OGS_USE_NEW_EQS)
	MESSAGE(STATUS "Use New EQS class")
	ADD_DEFINITIONS(-DNEW_EQS)
ENDIF()

IF(PARALLEL_USE_MPI)
	MESSAGE(STATUS "Enabling MPI")
	FIND_PACKAGE(MPI REQUIRED)
	ADD_DEFINITIONS(-DUSE_MPI)
ENDIF()

IF(MSVC)
	ADD_DEFINITIONS(-DMSVC)
ENDIF() # MSVC

IF(OGS_DELETE_EDGES_AFTER_INIT)
	ADD_DEFINITIONS(-DOGS_DELETE_EDGES_AFTER_INIT)
ENDIF()

IF(OGS_OUTPUT_TIME_ALLPCS)
	ADD_DEFINITIONS(-DOUTPUT_TIME_FOR_ALLPCS)
ENDIF()

# Add subdirectories with the projects
ADD_SUBDIRECTORY( Base )
ADD_SUBDIRECTORY( MathLib )
ADD_SUBDIRECTORY( GEO )
ADD_SUBDIRECTORY( MSH )
ADD_SUBDIRECTORY( MSHGEOTOOLS )
ADD_SUBDIRECTORY( FEM )
IF(OGS_FEM_IPQC)
	ADD_SUBDIRECTORY(IPQC)
ENDIF()
ADD_SUBDIRECTORY( GCC )
IF(OGS_FEM_GEMS OR OGS_FEM_PETSC_GEMS)
	ADD_SUBDIRECTORY( GEM )
ENDIF(OGS_FEM_GEMS OR OGS_FEM_PETSC_GEMS)
IF(OGS_FEM_CHEMAPP)
	ADD_SUBDIRECTORY( EQL )
	LINK_DIRECTORIES( ${CMAKE_SOURCE_DIR}/EQL )
ENDIF(OGS_FEM_CHEMAPP)
IF (OGS_FEM_CAP)
	ADD_SUBDIRECTORY( CMP )
ENDIF (OGS_FEM_CAP)
ADD_SUBDIRECTORY( FileIO )
ADD_SUBDIRECTORY( OGSProject )
ADD_SUBDIRECTORY( OGS )


# Create Configure.h
CONFIGURE_FILE (Base/Configure.h.in ${PROJECT_BINARY_DIR}/Base/Configure.h)
CONFIGURE_FILE (Base/BuildInfo.h.in ${PROJECT_BINARY_DIR}/Base/BuildInfo.h)

IF (BENCHMARK_DIR_FOUND OR GTEST_FOUND)
	ENABLE_TESTING()
ENDIF (BENCHMARK_DIR_FOUND OR GTEST_FOUND)

IF (EXAMPLEDATA_DIR_FOUND)
	INSTALL (DIRECTORY ${EXAMPLEDATA_DIR_FOUND} DESTINATION . PATTERN .svn EXCLUDE)
ENDIF (EXAMPLEDATA_DIR_FOUND)

IF (OGS_BUILD_TESTS)
	ADD_SUBDIRECTORY(tests)
ENDIF (OGS_BUILD_TESTS)

IF (OGS_PACKAGING)
	# Add packaging configuration
	MESSAGE (STATUS "Enabling packaging")
	INCLUDE( CMakeConfiguration/Pack.cmake)
ENDIF (OGS_PACKAGING)

IF (OGS_CMAKE_DEBUG)
	INCLUDE(ListAllCMakeVariableValues)
	list_all_cmake_variable_values()
ENDIF (OGS_CMAKE_DEBUG)

IF (BENCHMARK_DIR_FOUND)
	SET(BENCHMARK_TIMEOUT 1800) # in s, 30 minutes timeout on normal benchmarks
	SET(EXCEEDING_BENCHMARK_TIMEOUT 86400) # 1 day timeout on exceeding benchmarks
	STRING (COMPARE EQUAL "$ENV{HOSTNAME}" "dev2.intern.ufz.de" HOST_IS_DEV2)
	IF (${HOST_IS_DEV2})
		MESSAGE (STATUS "On dev2: file comparing enabled")
	ENDIF (${HOST_IS_DEV2})

	FILE (GLOB BENCHMARK_CONFIGS "${PROJECT_SOURCE_DIR}/../benchmarks/*.cmake")
	FOREACH (BENCHMARK_CONFIG ${BENCHMARK_CONFIGS})
		INCLUDE ("${BENCHMARK_CONFIG}")
	ENDFOREACH(BENCHMARK_CONFIG)

	UNSET (COPY_BENCHMARKS_TO_REF CACHE)
ENDIF (BENCHMARK_DIR_FOUND)

IF (OGS_BUILD_UTILITIES)
	ADD_SUBDIRECTORY (UTL/MSHGEOTOOLS/)
	ADD_SUBDIRECTORY (UTL/GIS2FEM/)
ENDIF (OGS_BUILD_UTILITIES)

## Documentation ##
IF(DOXYGEN_FOUND)
	OPTION(DOCS_GENERATE_DIAGRAMS "Use the DOT tool to generate class diagrams." OFF)
	OPTION(DOCS_GENERATE_CALL_GRAPHS "Generate call dependency graphs." OFF)
	OPTION(DOCS_GENERATE_COLLABORATION_GRAPHS "Generate collaboration graphs." OFF)
	IF(DOT_TOOL_PATH AND DOCS_GENERATE_DIAGRAMS)
		SET(DOT_FOUND "YES" CACHE INTERNAL "")
	ENDIF() # DOT_TOOL_PATH AND DOCS_GENERATE_DIAGRAMS
	IF(DOCS_GENERATE_CALL_GRAPHS)
		SET(DOCS_GENERATE_CALL_GRAPHS_STRING "YES" CACHE INTERNAL "")
	ENDIF() # DOCS_GENERATE_CALL_GRAPHS
	IF(DOCS_GENERATE_COLLABORATION_GRAPHS)
		SET(DOCS_GENERATE_COLLABORATION_GRAPHS_STRING "YES" CACHE INTERNAL "")
	ENDIF() # DOCS_GENERATE_COLLABORATION_GRAPHS
	GET_FILENAME_COMPONENT(DOT_TOOL_PATH_ONLY ${DOT_TOOL_PATH} PATH)
	CONFIGURE_FILE(scripts/doxygen/Doxyfile.in ${PROJECT_BINARY_DIR}/Doxyfile)
	ADD_CUSTOM_TARGET(doc ${DOXYGEN_EXECUTABLE} ${PROJECT_BINARY_DIR}/Doxyfile
		WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
		COMMENT "Generating source code documentation with Doxygen." VERBATIM)
ENDIF() # DOXYGEN_FOUND
